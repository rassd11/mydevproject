name: create infrastructure

on:
  workflow_dispatch:
    # allows to execute manually
  
jobs:
  build:
    runs-on: ubuntu-latest

      
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up environment variables
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo $GITHUB_ENV
        

    # - name: Set up Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     terraform_version: 0.14.0
    #     terraform_wrapper: true
    # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    - name: Setup Terraform v0.14.0
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: 0.14.0
        terraform_wrapper: true
        
    - name: Setup Terraform version
      run: terraform --version
    - name: Setup Terraform wrapper path
      run: which terraform        

    - name: Setup Terragrunt v0.50.9
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.9/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    - name: Terragrunt Init
      working-directory: ./infra/environments
      #run: terragrunt init -var 'aws_access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'aws_secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' --terragrunt-non-interactive -lock=false
      # env:
      #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
      run: terragrunt init --terragrunt-non-interactive -lock=false
      # env: #-var 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' --terragrunt-non-interactive -lock=false
      # env:
      #   AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     

    # Generates an execution plan for Terragrunt
    - name: Terragrunt Plan
      working-directory: ./infra/environments
      # env:
      #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}     
      run: terragrunt plan --terragrunt-non-interactive -lock=false #-var 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' --terragrunt-non-interactive -lock=false
#terragrunt run-all plan 
      # env:
      #   AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # On push to main, build or change infrastructure according to Terragrunt configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terragrunt Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terragrunt Apply
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   run: terragrunt run-all apply --terragrunt-non-interactive
    #   env:
    #     GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    # - name: Gruntwork Terragrunt
    #   uses: gruntwork-io/terragrunt-action@v2.0.2
    #   with:
    #     tg_version: 0.50.9
    #     tf_version: 0.14.0
    #     tg_command: terragrunt init # && terragrunt plan -lock=false"
    #     tg_dir: ./infra/environments
    #     tg_comment: 0
    #     tg_add_approve: 1


    # Install the latest version of Terragrunt CLI and configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token


          
          


      
 #     - name: Setup working dir
        
      # - name: Run terraform steps
#          working-directory: ./infra/environments
      #   uses: hashicorp/setup-terraform@v1
          
      #   with:
      #     terraform_wrapper: false
      # - run: terraform init
      # - run: terraform plan
      # - name: Apply Terraform changes
      #   id: apply
      #   run: terraform apply --auto-approve -lock=false
      # - name: destroy
      #   run: terragrunt destroy --auto-approve -lock=false   #remove later if works
