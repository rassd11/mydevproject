name: deploy app and infra

on:
  workflow_dispatch:

jobs:
  Infra-Deploy:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up environment variables
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

    - name: Setup Terraform v0.14.0
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: 0.14.0
        terraform_wrapper: false
        
    - name: Setup Terraform version
      run: terraform --version

    - name: Setup Terragrunt v0.50.9
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.9/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    # - name: Terragrunt Destroy
    #   working-directory: ./infra/environments
    #   run: terragrunt destroy --auto-approve --terragrunt-non-interactive -lock=false      

      
    - name: Terragrunt Init
      working-directory: ./infra/environments
      run: terragrunt init --terragrunt-non-interactive -lock=false

    - name: Terragrunt Plan
      working-directory: ./infra/environments
      run: terragrunt plan --terragrunt-non-interactive -lock=false

    - name: Terragrunt Apply
      working-directory: ./infra/environments
      id: apply
      run: terragrunt apply --auto-approve --terragrunt-non-interactive -lock=false

    - name: Terragrunt Destroy
      if: steps.apply.outcome == 'failure'
      working-directory: ./infra/environments
      run: terragrunt destroy --auto-approve --terragrunt-non-interactive -lock=false      
    
    - name: Terragrunt refresh
      working-directory: ./infra/environments
      run: terragrunt refresh -lock=false && terragrunt output


#### working version - backup
    # - name: Terragrunt output
    #   id: terragrunt-output
    #   working-directory: ./infra/environments
    #   run: |
    #     TERRAGRUNT_OUTPUT=$(terragrunt output)
    #     echo "TERRAGRUNT_OUTPUT=$TERRAGRUNT_OUTPUT" >> $GITHUB_OUTPUT
    #     echo "Terragrunt output variable set to: $TERRAGRUNT_OUTPUT"   

    - name: Terragrunt output
      id: terragrunt-output
      working-directory: ./infra/environments
      run: |
        TERRAGRUNT_OUTPUT=$(terragrunt output cloudfront_domain_name)
        echo "TERRAGRUNT_OUTPUT=$TERRAGRUNT_OUTPUT" >> $GITHUB_OUTPUT
        echo "Terragrunt output variable set to: $TERRAGRUNT_OUTPUT"
    

  App-Deploy:
    runs-on: ubuntu-latest
    needs: Infra-Deploy
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
      
    - name: Install dependencies
      working-directory: app  
      run: |
        pip install -r requirements.txt
        pip list  # Print installed packages for debugging purposes

    - name: Run Python App
      working-directory: app  
      env:
        TERRAGRUNT_OUTPUT: ${{ needs.Infra-Deploy.terragrunt-output.TERRAGRUNT_OUTPUT }}
      run: |
        echo "Terragrunt output variable set to: $TERRAGRUNT_OUTPUT"

#      run: python3 app.py --cfDomain="$TERRAGRUNT_OUTPUT"








